@model DebReg.Models.TournamentOrganizationRegistration

@{
    ViewBag.Title = Resources.TournamentRegistration.Register.Strings.Title;
}
@using (Html.BeginForm(new { returnUrl = ViewBag.returnUrl })) {
    @Html.AntiForgeryToken()
        
    <div class="form-horizontal">
        <h2>@Html.Encode(Resources.TournamentRegistration.Register.Strings.Heading)</h2>
        <hr />
        <h3>@Html.Encode(Resources.Tournament.DisplayPartial.Strings.Heading)</h3>
        @Html.Action("DisplayPartial", "Tournament", new { tournamentId = Model.TournamentId })
        <hr />
        <h3>@Html.Encode(Resources.TournamentRegistration.Register.Strings.YourRegistrationHeading)</h3>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.TournamentId)
        @Html.HiddenFor(model => model.OrganizationId)
        
            @if (Model.Organization != null) {
                if (Model.Organization.LinkedOrganizations != null
                    && Model.Organization.LinkedOrganizations.Count > 0) {
                    <div class="form-group">
                        @Html.LabelFor(model => model.BilledOrganization, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @{
                                var organizations = Model.Organization.LinkedOrganizations.Select(o => new { Id = o.Id, Name = o.Name }).ToList();
                                organizations.Add(new { Id = Model.Organization.Id, Name = Model.Organization.Name });
                            }
                            @Html.DropDownListFor(
                                m => m.BilledOrganizationId,
                                new SelectList(organizations, "Id", "Name", Model.BilledOrganizationId),
                                Html.Encode(Resources.TournamentRegistration.Register.Strings.SelectOrganizationBilledPlaceholder))
                            @Html.ValidationMessageFor(model => model.BilledOrganizationId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                else {
                    Model.BilledOrganizationId = Model.OrganizationId;
                    @Html.HiddenFor(model => model.BilledOrganizationId)
                }
            }
        <div class="form-group">
            @Html.LabelFor(model => model.TeamsWanted, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TeamsWanted, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TeamsWanted, "", new { @class = "text-danger" })
            </div>
        </div>
    
        <div class="form-group">
            @Html.LabelFor(model => model.AdjudicatorsWanted, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AdjudicatorsWanted, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AdjudicatorsWanted, "", new { @class = "text-danger" })
            </div>
        </div>
    
        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
        </div>
    
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@Html.Encode(Resources.TournamentRegistration.Register.Strings.RegisterButton)" class="btn btn-default" />
            </div>
        </div>
    </div>
}
    
